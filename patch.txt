diff --git a/.clang-format b/.clang-format
new file mode 100644
index 0000000..509ea99
--- /dev/null
+++ b/.clang-format
@@ -0,0 +1,89 @@
+---
+Language: Cpp
+BasedOnStyle: Chromium
+AccessModifierOffset: -4
+AlignAfterOpenBracket: Align
+AlignConsecutiveAssignments: false
+AlignConsecutiveDeclarations: false
+AlignEscapedNewlinesLeft: true
+AlignOperands: true
+AlignTrailingComments: true
+AllowAllParametersOfDeclarationOnNextLine: false
+AllowShortBlocksOnASingleLine: true
+AllowShortCaseLabelsOnASingleLine: true
+AllowShortFunctionsOnASingleLine: true
+AllowShortIfStatementsOnASingleLine: true
+AllowShortLoopsOnASingleLine: true
+AlwaysBreakAfterDefinitionReturnType: None
+AlwaysBreakAfterReturnType: None
+AlwaysBreakBeforeMultilineStrings: true
+AlwaysBreakTemplateDeclarations: true
+BinPackArguments: true
+BinPackParameters: false
+BraceWrapping:
+  AfterClass: true
+  AfterControlStatement: true
+  AfterEnum: true
+  AfterFunction: true
+  AfterNamespace: false
+  AfterObjCDeclaration: true
+  AfterStruct: true
+  AfterUnion: true
+  BeforeCatch: true
+  BeforeElse: true
+  IndentBraces: true
+BreakBeforeBinaryOperators: None
+BreakBeforeBraces: Stroustrup
+BreakBeforeTernaryOperators: true
+BreakConstructorInitializersBeforeComma: false
+ColumnLimit: 100
+CommentPragmas: "^ IWYU pragma:"
+ConstructorInitializerAllOnOneLineOrOnePerLine: true
+ConstructorInitializerIndentWidth: 4
+ContinuationIndentWidth: 4
+Cpp11BracedListStyle: true
+DerivePointerAlignment: false
+DisableFormat: false
+ExperimentalAutoDetectBinPacking: false
+ForEachMacros: [foreach, Q_FOREACH, BOOST_FOREACH]
+IncludeCategories:
+  - Regex: '^<.*\.h>'
+    Priority: 1
+  - Regex: "^<.*"
+    Priority: 2
+  - Regex: ".*"
+    Priority: 3
+IndentCaseLabels: true
+IndentWidth: 4
+IndentWrappedFunctionNames: false
+KeepEmptyLinesAtTheStartOfBlocks: false
+MacroBlockBegin: ""
+MacroBlockEnd: ""
+MaxEmptyLinesToKeep: 1
+NamespaceIndentation: None
+ObjCBlockIndentWidth: 2
+ObjCSpaceAfterProperty: false
+ObjCSpaceBeforeProtocolList: false
+PenaltyBreakBeforeFirstCallParameter: 1
+PenaltyBreakComment: 300
+PenaltyBreakFirstLessLess: 120
+PenaltyBreakString: 1000
+PenaltyExcessCharacter: 1000000
+PenaltyReturnTypeOnItsOwnLine: 200
+PointerAlignment: Left
+ReflowComments: true
+ShortNamespaceLines: 0
+SortIncludes: false
+SpaceAfterCStyleCast: false
+SpaceBeforeAssignmentOperators: true
+SpaceBeforeParens: ControlStatements
+SpaceInEmptyParentheses: false
+SpacesBeforeTrailingComments: 2
+SpacesInAngles: false
+SpacesInContainerLiterals: true
+SpacesInCStyleCastParentheses: false
+SpacesInParentheses: false
+SpacesInSquareBrackets: false
+Standard: Auto
+TabWidth: 4
+UseTab: Never
diff --git a/.gitignore b/.gitignore
index 259148f..3c7eb20 100644
--- a/.gitignore
+++ b/.gitignore
@@ -30,3 +30,8 @@
 *.exe
 *.out
 *.app
+
+# IDEs
+.vscode/
+build/
+CMakeLists.txt.user
diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..1393300
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,11 @@
+cmake_minimum_required(VERSION 3.20)
+
+project(ez-cpp LANGUAGES CXX)
+
+set(CMAKE_CXX_STANDARD 23)
+
+include(cmake/conan.cmake)
+include(cmake/compiler.cmake)
+include(cmake/lib.cmake)
+
+add_subdirectory(src)
diff --git a/cmake/compiler.cmake b/cmake/compiler.cmake
new file mode 100644
index 0000000..13eec30
--- /dev/null
+++ b/cmake/compiler.cmake
@@ -0,0 +1,26 @@
+message("++++ CMAKE_C_COMPILER : ${CMAKE_C_COMPILER}")
+message("++++ CMAKE_CXX_COMPILER : ${CMAKE_CXX_COMPILER}")
+
+####### Flags
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wpedantic -Werror")
+
+
+####### Modules
+
+# set(CMAKE_EXPERIMENTAL_CXX_MODULE_CMAKE_API "2182bf5c-ef0d-489a-91da-49dbc3090d2a")
+
+# set(CMAKE_CXX_EXTENSIONS OFF)
+#Â add_definitions(-DCMAKE_EXPORT_COMPILE_COMMANDS=ON)
+
+# set(CMake_TEST_CXXModules_UUID "a246741c-d067-4019-a8fb-3d16b0c9d1d3")
+
+# set(CMAKE_EXPERIMENTAL_CXX_MODULE_DYNDEP 1)
+# string(CONCAT CMAKE_EXPERIMENTAL_CXX_SCANDEP_SOURCE
+#   "<CMAKE_CXX_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -E -x c++ <SOURCE>"
+#   " -MT <DYNDEP_FILE> -MD -MF <DEP_FILE>"
+#   " -fmodules-ts -fdep-file=<DYNDEP_FILE> -fdep-output=<OBJECT> -fdep-format=trtbd"
+#   " -o <PREPROCESSED_SOURCE>")
+# set(CMAKE_EXPERIMENTAL_CXX_MODULE_MAP_FORMAT "gcc")
+# set(CMAKE_EXPERIMENTAL_CXX_MODULE_MAP_FLAG "-fmodules-ts -fmodule-mapper=<MODULE_MAP_FILE> -fdep-format=trtbd -x c++")
+
+
diff --git a/cmake/conan.cmake b/cmake/conan.cmake
new file mode 100644
index 0000000..e23ea06
--- /dev/null
+++ b/cmake/conan.cmake
@@ -0,0 +1,22 @@
+message("++++ Root project directory : ${CMAKE_SOURCE_DIR}")
+message("++++ Build directory        : ${CMAKE_CURRENT_BINARY_DIR}")
+
+execute_process(COMMAND 
+	conan install 
+		-of ${CMAKE_CURRENT_BINARY_DIR} 
+		--build missing
+		${CMAKE_SOURCE_DIR}/conanfile.txt  
+	WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
+	RESULT_VARIABLE conan_cmd_result)
+
+if(NOT conan_cmd_result EQUAL 0)
+	message(FATAL_ERROR "Conan failed")
+endif()
+
+set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
+include(${CMAKE_CURRENT_BINARY_DIR}/conan_paths.cmake)
+
+find_package(GTest MODULE REQUIRED)
+
+enable_testing()
+include(GoogleTest)
\ No newline at end of file
diff --git a/cmake/lib.cmake b/cmake/lib.cmake
new file mode 100644
index 0000000..3d0d5e5
--- /dev/null
+++ b/cmake/lib.cmake
@@ -0,0 +1,32 @@
+# Find *.hpp and *.cpp files and creates a static library.
+# Public headers expected to be in the in the ${source_folder}/include folder
+function (add_static_library target_name source_folder)
+    message("++++ Adding static library '${target_name}' from source folder '${source_folder}'")
+    file(GLOB_RECURSE header_files_ RELATIVE ${source_folder} *.hpp)
+    file(GLOB_RECURSE source_files_ RELATIVE ${source_folder} *.cpp)
+    message("++++ Header files '${header_files_}'")
+    message("++++ Source files '${source_files_}'")
+
+    add_library(
+        ${target_name} 
+        STATIC 
+            ${header_files_}
+            ${source_files_}
+        )   
+
+    target_include_directories(${target_name} PUBLIC ${source_folder}/include)
+    set_target_properties(${target_name} PROPERTIES LINKER_LANGUAGE CXX)
+    target_compile_features(${target_name} PUBLIC cxx_std_23)
+endfunction()
+
+
+
+function (add_modules_libray target_name)
+    add_library(${target_name}) 
+    target_sources(
+        ${target_name}
+        PUBLIC
+            FILE_SET cxx_modules TYPE CXX_MODULES FILES
+            ${ARGN}
+    )
+endfunction()
\ No newline at end of file
diff --git a/conanfile.txt b/conanfile.txt
new file mode 100644
index 0000000..6ba523d
--- /dev/null
+++ b/conanfile.txt
@@ -0,0 +1,6 @@
+[requires]
+gtest/cci.20210126
+
+[generators]
+cmake_find_package
+cmake_paths
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
new file mode 100644
index 0000000..f7921bd
--- /dev/null
+++ b/src/CMakeLists.txt
@@ -0,0 +1 @@
+add_subdirectory(libs)
\ No newline at end of file
diff --git a/src/libs/CMakeLists.txt b/src/libs/CMakeLists.txt
new file mode 100644
index 0000000..82bfe4a
--- /dev/null
+++ b/src/libs/CMakeLists.txt
@@ -0,0 +1 @@
+add_subdirectory(core)
\ No newline at end of file
diff --git a/src/libs/core/CMakeLists.txt b/src/libs/core/CMakeLists.txt
new file mode 100644
index 0000000..06ddbec
--- /dev/null
+++ b/src/libs/core/CMakeLists.txt
@@ -0,0 +1,2 @@
+add_subdirectory(lib)
+add_subdirectory(tests)
\ No newline at end of file
diff --git a/src/libs/core/lib/CMakeLists.txt b/src/libs/core/lib/CMakeLists.txt
new file mode 100644
index 0000000..e5776c5
--- /dev/null
+++ b/src/libs/core/lib/CMakeLists.txt
@@ -0,0 +1,2 @@
+
+add_static_library(ez_core ${CMAKE_CURRENT_SOURCE_DIR})
diff --git a/src/libs/core/lib/include/ez/overload.hpp b/src/libs/core/lib/include/ez/overload.hpp
new file mode 100644
index 0000000..1197f5f
--- /dev/null
+++ b/src/libs/core/lib/include/ez/overload.hpp
@@ -0,0 +1,32 @@
+#pragma once
+
+#include <variant>
+
+namespace ez {
+
+template <typename... Visitors>
+struct Overload : Visitors... {
+    using Visitors::operator()...;
+};
+
+template <class... Visitors>
+Overload(Visitors...) -> Overload<Visitors...>;
+
+/// dispatch allows to visit a variant using callables.
+/// Example:
+/// @code {.c++}
+/// std::variant<bool, int, std::string> v = some_value();
+/// variant::dispatch(v,
+///     [](bool val) {std::cout << "It is a bool " << val;},
+///     [](int val) {std::cout << "It is a int " << val;}
+///     [](const std::string& val) {std::cout << "It is a string " << val;}
+/// );
+/// @endcode
+template <typename Variant, typename... Visitors>
+decltype(auto) dispatch(Variant&& variant, Visitors&&... visitors)
+{
+    Overload visitor{std::forward<Visitors>(visitors)...};
+    return std::visit(visitor, variant);
+}
+
+}  // namespace ez
diff --git a/src/libs/core/lib/src/overload.cpp b/src/libs/core/lib/src/overload.cpp
new file mode 100644
index 0000000..8ea91fe
--- /dev/null
+++ b/src/libs/core/lib/src/overload.cpp
@@ -0,0 +1,5 @@
+#include <ez/overload.hpp>
+
+namespace ez {
+
+}
diff --git a/src/libs/core/tests/CMakeLists.txt b/src/libs/core/tests/CMakeLists.txt
new file mode 100644
index 0000000..2a51799
--- /dev/null
+++ b/src/libs/core/tests/CMakeLists.txt
@@ -0,0 +1,14 @@
+
+add_executable(ez_core_tests
+    main.cpp overload.cpp)
+
+target_link_libraries(ez_core_tests 
+    PRIVATE
+        ez_core 
+        GTest::gtest 
+        GTest::gtest_main 
+        GTest::gmock 
+        GTest::gmock_main
+)
+
+gtest_discover_tests(ez_core_tests)
diff --git a/src/libs/core/tests/main.cpp b/src/libs/core/tests/main.cpp
new file mode 100644
index 0000000..73f36b4
--- /dev/null
+++ b/src/libs/core/tests/main.cpp
@@ -0,0 +1,8 @@
+
+#include <gtest/gtest.h>
+
+int main(int argc, char** argv)
+{
+    ::testing::InitGoogleTest(&argc, argv);
+    return RUN_ALL_TESTS();
+}
diff --git a/src/libs/core/tests/overload.cpp b/src/libs/core/tests/overload.cpp
new file mode 100644
index 0000000..1529b54
--- /dev/null
+++ b/src/libs/core/tests/overload.cpp
@@ -0,0 +1,16 @@
+#include <gtest/gtest.h>
+
+#include <ez/overload.hpp>
+
+#include <variant>
+
+using namespace ez;
+
+TEST(overload, visit_variant)
+{
+    std::variant<bool, int, std::string> v = 35;
+    dispatch(
+        v, [](bool val) { std::cout << "It is a bool " << val; },
+        [](int val) { std::cout << "It is a int " << val; },
+        [](const std::string& val) { std::cout << "It is a string " << val; });
+}
